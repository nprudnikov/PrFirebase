<?xml version="1.0" encoding="utf-8"?>
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<init>
		<log text="Firebase Initialization"/>
		<setStringFromProperty result="ConfigFile" ini="Engine" section="/Script/PrFirebase.PrFirebaseSettings" property="FirebaseAndroidConfig" default="Config/Firebase/google-services.json"/>

		<setBoolFromProperty result="bFirebaseEnable" ini="Engine" section="/Script/PrFirebase.PrFirebaseSettings" property="bFirebaseEnable" default="false"/>
		<setBoolFromProperty result="bFirebaseCrashlyticsEnable" ini="Engine" section="/Script/PrFirebase.PrFirebaseSettings" property="bFirebaseCrashlyticsEnable" default="false"/>
		<setBoolFromProperty result="bFirebaseRemoteConfigEnable" ini="Engine" section="/Script/PrFirebase.PrFirebaseSettings" property="bFirebaseRemoteConfigEnable" default="false"/>
		<setBoolFromProperty result="bFirebasePerformanceEnable" ini="Engine" section="/Script/PrFirebase.PrFirebaseSettings" property="bFirebasePerformanceEnable" default="false"/>
	</init>

	<androidManifestUpdates>
		<if condition="bFirebaseEnable">
			<true>
				<if condition="bFirebasePerformanceEnable">
					<true>
						<addElements tag="application">
							<meta-data android:name="firebase_performance_logcat_enabled" android:value="false"/>
						</addElements>
					</true>
				</if>

				<!-- Force disable heap pointer tagging as it's required for Crashlytics NDK version 17.3.0 -->
				<addAttribute tag="application" name="android:allowNativeHeapPointerTagging" value="false"/>
			</true>
		</if>
	</androidManifestUpdates>

	<proguardAdditions>
		<if condition="bFirebaseEnable">
			<true> 
				<if condition="bFirebaseCrashlyticsEnable">
					<true>
						<insert>
							<![CDATA[
							-keepattributes *Annotation*
							-keepattributes SourceFile,LineNumberTable
							-keep public class * extends java.lang.Exception
							-keep class com.google.firebase.** { *; }
							-dontwarn com.google.firebase.**

							-keepclassmembers class com.google.firebase.perf.metrics.Trace  {
								private final java.util.Map customAttributesMap;
							}
							]]>
						</insert>
					</true>
				</if>

				<insert>
					<![CDATA[
					-keep class com.google.firebase.analytics.** { *; }
					]]>
				</insert>
			</true>
		</if>
	</proguardAdditions>

	<buildscriptGradleAdditions>
		<if condition="bFirebaseEnable">
			<true>
				<insert>
					repositories {
						google()
						jcenter()
					}

					dependencies {
						classpath 'com.google.gms:google-services:4.3.8'
				</insert>

				<if condition="bFirebaseCrashlyticsEnable">
					<true>
						<insert>
							classpath 'com.google.firebase:firebase-crashlytics-gradle:2.7.1'
						</insert>
					</true>
				</if>

				<if condition="bFirebasePerformanceEnable">
					<true>
						<insert>
							classpath 'com.google.firebase:perf-plugin:1.4.2'
						</insert>
					</true>
				</if>

				<insert>
					}	// dependencies
				</insert>
			</true>
		</if>
	</buildscriptGradleAdditions>

	<buildGradleAdditions>
		<if condition="bFirebaseEnable">
			<true>
				<insert>
					dependencies {
						implementation 'com.google.android.gms:play-services-games:23.1.0'

						implementation platform('com.google.firebase:firebase-bom:32.3.1')
						implementation 'com.google.firebase:firebase-analytics'
				</insert>

				<if condition="bFirebaseCrashlyticsEnable">
					<true>
						<insert>
							implementation 'com.google.firebase:firebase-crashlytics-ndk'
							implementation 'com.google.firebase:firebase-crashlytics'
						</insert>
					</true>
				</if>

				<if condition="bFirebaseRemoteConfigEnable">
					<true>
						<insert>
							implementation 'com.google.firebase:firebase-config'
						</insert>
					</true>
				</if>

				<if condition="bFirebasePerformanceEnable">
					<true>
						<insert>
							implementation 'com.google.firebase:firebase-perf'
						</insert>
					</true>
				</if>

				<insert>
					}	// dependencies

					apply plugin: 'com.android.application'
					apply plugin: 'com.google.gms.google-services'
				</insert>

				<if condition="bFirebasePerformanceEnable">
					<true>
						<insert>
							apply plugin: 'com.google.firebase.firebase-perf'
						</insert>
					</true>
				</if>

				<if condition="bFirebaseCrashlyticsEnable">
					<true>
						<insert>
							apply plugin: 'com.google.firebase.crashlytics'

							android {
								buildTypes {
									release {
										firebaseCrashlytics {
											nativeSymbolUploadEnabled true
											strippedNativeLibsDir 'build/intermediates/stripped_native_libs/release/out/lib'
											unstrippedNativeLibsDir 'src/main/jniLibs'
										}
									}
									debug {
										firebaseCrashlytics {
											nativeSymbolUploadEnabled true
											strippedNativeLibsDir 'build/intermediates/stripped_native_libs/debug/out/lib'
											unstrippedNativeLibsDir 'src/main/jniLibs'
										}
									}
								}
							}
						</insert>
					</true>
				</if>

			</true>
		</if>
	</buildGradleAdditions>

	<prebuildCopies>
		<if condition="bFirebaseEnable">
			<true>
				<copyDir src="$S(PluginDir)/External/Android" dst="$S(BuildDir)/src"/>
				<copyFile src="$S(PluginDir)/../../../../$S(ConfigFile)" dst="$S(BuildDir)/gradle/app/google-services.json" force="false"/>
				<copyFile src="$S(PluginDir)/../../../../$S(ConfigFile)" dst="$S(BuildDir)/gradle/app/src/debug/google-services.json" force="false"/>
				<copyFile src="$S(PluginDir)/../../../../$S(ConfigFile)" dst="$S(BuildDir)/gradle/app/src/release/google-services.json" force="false"/>
			</true>
		</if>
	</prebuildCopies>
	
	<gameActivityImportAdditions>
		<if condition="bFirebaseEnable">
			<true>
				<insert>
					<![CDATA[
						import com.pr.firebase.*;
					]]>
				</insert>
			</true>
		</if>
	</gameActivityImportAdditions>

	<gameActivityClassAdditions>
		<if condition="bFirebaseEnable">
			<true>
				<insert>
					<![CDATA[
						public void AndroidThunkJava_Firebase_Initialize()
						{
							
						}
            
            // Firebase Crashlytics

						public void AndroidThunkJava_FirebaseCrashlytics_SetUserIdentifier(String UserIdentifier)
						{
							PrFirebase.crashlyticsProxy().setUserIdentifier(UserIdentifier);
						}

						public void AndroidThunkJava_FirebaseCrashlytics_WriteLog(String Log)
						{
							PrFirebase.crashlyticsProxy().writeLog(Log);
						}

						public void AndroidThunkJava_FirebaseCrashlytics_WriteError(String ErrorMessage)
						{
							RuntimeException ex = new RuntimeException(String.format("%s", ErrorMessage)); 
							StackTraceElement[] trace = new StackTraceElement[] {
								new StackTraceElement(ErrorMessage, "java", null, -2),
							};

							ex.setStackTrace(trace); 
							PrFirebase.crashlyticsProxy().writeException(ex);
						}

						public void AndroidThunkJava_FirebaseCrashlytics_AddAttribute(String Key, String Value)
						{
							PrFirebase.crashlyticsProxy().addAttribute(Key, Value);
						}
            
            // FirebasePerformance
            
            public void AndroidThunkJava_FirebasePerformance_StartTrace(int index, String identifier)
						{
							PrFirebase.performanceProxy().startTrace(index, identifier);
						}
            
            public void AndroidThunkJava_FirebasePerformance_StopTrace(int index)
						{
							PrFirebase.performanceProxy().stopTrace(index);
						}
            
            public void AndroidThunkJava_FirebasePerformance_IncrementMetric(int index, String name, int value)
						{
							PrFirebase.performanceProxy().incrementMetric(index, name, value);
						}
            
            public void AndroidThunkJava_FirebasePerformance_SetMetric(int index, String name, int value)
						{
							PrFirebase.performanceProxy().setMetric(index, name, value);
						}
            
            public void AndroidThunkJava_FirebasePerformance_SetAttribute(int index, String name, String value)
						{
							PrFirebase.performanceProxy().setAttribute(index, name, value);
						}
            
            public void AndroidThunkJava_FirebasePerformance_RemoveAttribute(int index, String name)
						{
							PrFirebase.performanceProxy().removeAttribute(index, name);
						}

			// Firebase Analytics
			
			public void AndroidThunkJava_FirebaseAnalytics_LogEvent(String Name, Bundle params)
						{
							PrFirebase.analyticsProxy().logEvent(Name, params);
						}
						
			public void AndroidThunkJava_FirebaseAnalytics_LogScreenView(String ScreenName, String ScreenClass)
						{
							PrFirebase.analyticsProxy().logScreenView(ScreenName, ScreenClass);
						}
												
			public void AndroidThunkJava_FirebaseAnalytics_LogSpendVirtualCurrency(String ItemName, String CurrencyName, float Value)
						{
							PrFirebase.analyticsProxy().logSpendVirtualCurrency(ItemName, CurrencyName, Value);
						}

			public void AndroidThunkJava_FirebaseAnalytics_LogLevelUp(String Character, long Level)
						{
							PrFirebase.analyticsProxy().logLevelUp(Character, Level);
						}
						
			public void AndroidThunkJava_FirebaseAnalytics_LogLevelStart(String LevelName)
						{
							PrFirebase.analyticsProxy().logLevelStart(LevelName);
						}	
											
			public void AndroidThunkJava_FirebaseAnalytics_LogLevelEnd(String LevelName, String Success)
						{
							PrFirebase.analyticsProxy().logLevelEnd(LevelName, Success);
						}	
																
			public void AndroidThunkJava_FirebaseAnalytics_LogPurchase(Bundle purchaseData)
						{
							PrFirebase.analyticsProxy().logPurchase(purchaseData);
						}	
																					
			public void AndroidThunkJava_FirebaseAnalytics_SetDefaultEventParameters(Bundle params)
						{
							PrFirebase.analyticsProxy().setDefaultEventParameters(params);
						}
						
			public void AndroidThunkJava_FirebaseAnalytics_LogImpression(Bundle impressionData)
						{
							PrFirebase.analyticsProxy().logImpression(impressionData);
						}
						
			public void AndroidThunkJava_FirebaseAnalytics_RequestAppInstanceId()
						{
							PrFirebase.analyticsProxy().RequestAppInstanceId();
						}

			public String AndroidThunkJava_FirebaseAnalytics_GetAppInstanceId()
						{
							return PrFirebase.analyticsProxy().GetAppInstanceId();
						}
					]]>
				</insert>
			</true>
		</if>
	</gameActivityClassAdditions>

	<gameActivityOnCreateAdditions>
		<if condition="bFirebaseEnable">
			<true>
				<insert>
					<![CDATA[
						PrFirebase.initialize(this);
					]]>
				</insert>
			</true>
		</if>
	</gameActivityOnCreateAdditions>

</root>
